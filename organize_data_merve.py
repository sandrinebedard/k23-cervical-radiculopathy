#!/usr/bin/env python
# -*- coding: utf-8

# Convert data to template for FMRI segmentation project
# For usage: python organize_data_merve.py -h
# Author: Sandrine Bédard

import os
import shutil
import argparse
import json
import pandas as pd
import subprocess


def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("-path-data",
                        required=True,
                        type=str,
                        help="Path to data_processed")
    parser.add_argument("-path-derivatives",
                        type=str,
                        required=True,
                        help="Folder to derivatives results")

    parser.add_argument("-path-out",
                        type=str,
                        required=True,
                        help="Folder to write output dataset")

    return parser


def create_participants_json(path_output):
    """
    Create participants.json file
    :param path_output: path to the output BIDS folder
    :return:
    """
    # Create participants.json
    data_json = {
        "age": {
            "Description": "Age of the participant",
            "Units": "years"
        },
        "sex": {
            "Description": "Sex of the participant",
            "Levels": {
                "M": "Male",
                "F": "Female"
            }
        }
    }
    write_json(path_output, 'participants.json', data_json)


def write_json(path_output, json_filename, data_json):
    """
    :param path_output: path to the output BIDS folder
    :param json_filename: json filename, for example: participants.json
    :param data_json: JSON formatted content
    :return:
    """
    with open(os.path.join(path_output, json_filename), 'w') as json_file:
        json.dump(data_json, json_file, indent=4)
        # Add last newline
        json_file.write("\n")
        print(f'{json_filename} created in {path_output}')


def create_dataset_description(path_output):
    """
    Create dataset_description.json file
    :param path_output: path to the output BIDS folder
    :return:
    """
    data_json = {
        "Name":   "data_stanford_rest_weber",
        "Dataset Description": "This is a data set consisting of resting-state spinal cord fMRI data from healthy participants (HC) and patients with cervical radiculopathy.",
        "DatasetType": "derivative",
        "Generated by":
        [
            {
                "Name": "motion correction",
                "Description": "A two-step motion correction procedure was applied to the EPI time-series data. Initially, the mid-volume (volume 125) was used as the target image for the first step of motion correction. Based on this image, the spinal cord was automatically segmented in order to provide a spinal cord centerline that then served as input for creating a cylindrical mask (with a diameter of 30 mm). This mask was employed during the motion-correction procedure in order to ensure that regions moving independently from the cord would not adversely affect motion estimation. Slice-wise motion correction with a second degree polynomial regularization in the z-direction was then performed. In the second step, a new target image was obtained by calculating the mean of motion-corrected images from the first step and the raw images were realigned to this new target image, using the identical procedure as described above.",
                "Software and version": "FSL, v.6.0"
            },
            {
                "Name": "Segmentation",
                "Description  (Automated, Semi-automated, Manual)": "semi-automated segmentation of the spinal cord",
                "Author (First Name, Last Name)": "Sandrine Bedard",
                "Software and version": "Spinal Cord Toolbox, v 6.0"
            }
        ],

        "Institution": "Systems Neuroscience and Pain Lab, Department of Anesthesia, Perioperative and Pain Medicine, Stanford University, Palo Alto, CA, USA",
        "Co-authors (LastName, FirstName ; LastName, FirstName ...)": "Weber, Kenneth A.; Bedard, Sandrine",
        "Contact person (FirstName LastName email)": "Sandrine Bedard sbedard@stanford.edu",
        "Reference": " ",
        "Funding info": "National Institute of Neurological Disorders and Stroke of the National Institutes of Health (USA) under award number K23NS104211"
        }

    write_json(path_output, 'dataset_description.json', data_json)

EXCLUDE = ['sub-CR014', 'sub-HC027']
# TODO:
# - Look at Jan's script to create participants.tsv and etc...
# - Validate dataset name

def main():
    args = get_parser().parse_args()

    path_data = args.path_data
    path_derivatives = args.path_derivatives
    path_out = args.path_out
    
    DATASET_NAME = 'stanford_rest'
    DATASET_NAME_SHORT = 'stanfordRW'

    # Create output folder
    if not os.path.exists(path_out):
        os.mkdir(path_out)
    # Create derivatives
    path_derivatives_out = os.path.join(path_out, 'derivatives')
    if not os.path.exists(path_derivatives_out):
        os.makedirs(path_derivatives_out)
    path_derivatives_out_labels = os.path.join(path_derivatives_out, 'label')
    path_derivatives_out_moco = os.path.join(path_derivatives_out, 'moco')
    if not os.path.exists(path_derivatives_out_labels):
        os.makedirs(path_derivatives_out_labels)
    if not os.path.exists(path_derivatives_out_moco):
        os.makedirs(path_derivatives_out_moco)

    create_dataset_description(path_out)
    create_participants_json(path_out)
    # Modify participants.tsv
    df_participants = pd.read_csv(os.path.join(path_data, 'participants.tsv'), sep="\t")
    df_participants['participant_id'] = 'sub-' + DATASET_NAME_SHORT + df_participants['participant_id'].str.split('-').str[-1] 
    # Save new tsv
    df_participants.to_csv(os.path.join(path_out, 'participants.tsv'), index=False, header=True, sep="\t")

    # Create task-rest_bold.json : description of task
    task = {
        "TaskName": "rest",
        "TaskDescription": "Resting-state acquisitions, eyes open."
    }
    write_json(path_out, 'task-rest_bold.json', task)

    for subject in os.listdir(path_data):
        if "sub" in subject:
            print(subject)
            if subject not in EXCLUDE:
                subject_path = os.path.join(path_data, subject)
                subject_path_derivatives = os.path.join(path_derivatives, subject)
                # Get subject number
                suffix = subject.split('-')[1]
                fname_old_bold_moco_image = os.path.join(subject_path, 'ses-baselinespinalcord', 'func', subject + '_ses-baselinespinalcord_task-rest_bold_mc2.nii.gz')
                fname_old_bold_moco_json = os.path.join(subject_path, 'ses-baselinespinalcord', 'func', subject + '_ses-baselinespinalcord_task-rest_bold.json')
                fname_old_bold_moco_mean = os.path.join(subject_path, 'ses-baselinespinalcord', 'func', subject + '_ses-baselinespinalcord_task-rest_bold_mc2_mean.nii.gz')
                fname_old_bold_moco_mean_seg = os.path.join(subject_path_derivatives, 'ses-baselinespinalcord', 'func', subject + '_ses-baselinespinalcord_task-rest_bold_mc2_mean_seg.nii.gz')
                if not os.path.exists(fname_old_bold_moco_mean_seg):
                    fname_old_bold_moco_mean_seg = os.path.join(subject_path, 'ses-baselinespinalcord', 'func', subject + '_ses-baselinespinalcord_task-rest_bold_mean_mc2_seg.nii.gz')

                # Create new subject name
                subject_new = 'sub-' + DATASET_NAME_SHORT + suffix
                print('New suject:', subject_new)
                path_out_subject_labels = os.path.join(path_derivatives_out_labels, subject_new, 'func')
                if not os.path.exists(path_out_subject_labels):
                    os.makedirs(path_out_subject_labels)
                path_out_subject_moco = os.path.join(path_derivatives_out_moco, subject_new, 'func')
                if not os.path.exists(path_out_subject_moco):
                    os.makedirs(path_out_subject_moco)
                fname_new_bold_moco_image = os.path.join(path_out_subject_moco, subject_new + '_task-rest_desc-moco_bold.nii.gz')
                shutil.copyfile(fname_old_bold_moco_image, fname_new_bold_moco_image)
                # Keep only first 20 volumes
                os.system(f'fslroi {fname_new_bold_moco_image} {fname_new_bold_moco_image} 0 20')

                fname_new_bold_moco_json = os.path.join(path_out_subject_moco, subject_new + '_task-rest_desc-moco_bold.json')
                shutil.copyfile(fname_old_bold_moco_json, fname_new_bold_moco_json)
                fname_new_bold_moco_mean = os.path.join(path_out_subject_moco, subject_new + '_task-rest_desc-mocomean_bold.nii.gz')
                shutil.copyfile(fname_old_bold_moco_mean, fname_new_bold_moco_mean)
                fname_new_bold_moco_mean_seg = os.path.join(path_out_subject_labels, subject_new + '_task-rest_desc-spinalcord_mask.nii.gz')
                shutil.copyfile(fname_old_bold_moco_mean_seg, fname_new_bold_moco_mean_seg)


if __name__ == "__main__":
    main()
