#!/bin/bash
# 
#
# Created by Kenneth Weber on 6/9/2016.
# Please cite Weber II KA, Chen Y, Wang X, Kahnt T, Parrish TB. Lateralization of Cervical Spinal Cord Activity During an Isometric Upper Extremity Motor Task. NeuroImage 2016;125:233-243.
# Brooks, J. C., et al. (2008). "Physiological noise modelling for spinal functional magnetic resonance imaging studies." Neuroimage 39(2): 680-692.

function usage()
{
cat << EOF

DESCRIPTION
  Performs correction for motion of slicewise physiological noise EV images (4D) generated by FSL's PNM tool using nearest neighbor interpolation. Inputs include the raw 4D (non-motion corrected) functional time series, the prefix for the physiological noise EV images, the number of physiological noise EV images, the compressed folder (folder.tar.gz) containing the corresponding transformation matrices from the 3D motion correction of volumes, and the output filename prefix.
  Outputs include voxelwise physiological noise EV images (4D) corrected for motion.
  Requires that FSL is installed. This was last updated using FSL Version 5.0.
  
USAGE
  `basename ${0}` -i <input> -p <physioev> -n <number> -f <folder> -o <output>

MANDATORY ARGUMENTS
  -i <input>                   Raw 4D functional time series (non-motion corrected)
  -p <physioev>                Prefix for the physiological noise EV images (e.g. if filename = physioev001.nii.gz then prefix = physioev)
  -n <number>                  Number of physiological noise EV images
  -f <folder>                  Compressed folder containing the transformation matrices (e.g., (folder.tar.gz))
  -o <output>                  Output filename prefix

EOF
}

if [ ! ${#@} -gt 0 ]; then
    usage `basename ${0}`
    exit 1
fi

#Initialization of variables

scriptname=${0}
input=
physio=
number=
folder=
output=
while getopts “hi:p:n:f:o:” OPTION
do
	case $OPTION in
	 h)
		usage
		exit 1
		;;
	 i)
		input=$OPTARG
		;;
	 p)
		physio=$OPTARG
		;;
	 n)
		number=$OPTARG
		;;
	 f)
		folder=$OPTARG
		;;
	 o)
		output=$OPTARG
		;;
	 ?)
		usage
		exit
		;;
     esac
done

# Check if the mandatory parameters were input

if [[ -z ${input} ]]; then
	 echo "ERROR: Input not specified. Exit program."
     exit 1
fi
if [[ -z ${physio} ]]; then
     echo "ERROR: Prefix for the physiological noise EV images not specified. Exit program."
     exit 1
fi
if [[ -z ${folder} ]]; then
    echo "ERROR: Compressed folder containing the transformation matrices not specified. Exit program."
    exit 1
fi
if [[ -z ${output} ]]; then
    echo "ERROR: Output not specified. Exit program."
    exit 1
fi

# Check if the input files exist and are readable
if [[ ! -a ${input} ]]; then
	echo "ERROR: ${input} does not exist or is not readable. Exit program."
	exit 1
fi
if [[ ! -a ${folder} ]]; then
    echo "ERROR: ${folder} does not exist or is not readable. Exit program."
    exit 1
fi

# Check extensions of the input files

if [[ ${input} != *.nii.gz ]] && [[ ${input} != *.nii ]] && [[ ${input} != *.img ]] && [[ ${input} != *.img.gz ]]; then
	 echo "ERROR: ${input} does not have .nii.gz, .nii, .img, or .img.gz extension. Exit program."
	 exit 1
fi
if [[ ${folder} != *.tar.gz ]]; then
	 echo "ERROR: ${folder} does not have *.tar.gz extension. Exit program."
     exit 1
fi

#Remove extension from files

input=`remove_ext ${input}`

# Get dimensions of input file

xdimi=`fslval ${input} dim1`
ydimi=`fslval ${input} dim2`
zdimi=`fslval ${input} dim3`
tdimi=`fslval ${input} dim4`
xpixdimi=`fslval ${input} pixdim1`
ypixdimi=`fslval ${input} pixdim2`
zpixdimi=`fslval ${input} pixdim3`
tr=`fslval ${input} pixdim4` # Calculate TR or sampling period for time series

#Move input file and folder to temporary folder

tmp_folder=`mktemp -u tmp.XXXXXXXXXX`
mkdir ${tmp_folder}
imcp ${input} ./${tmp_folder}/
cp ${folder} ./${tmp_folder}/

#Remove path from input files

input=$(basename ${input})
folder=$(basename ${folder})

#Check dimensions and file extensions of physio files and move to temporary folder

for ((i=1; i<=${number}; i++)); do
      fname=`printf "${physio}%0*d\n" 3 ${i}`
	  echo $fname
      xdimp=`fslval ${fname} dim1`
	  ydimp=`fslval ${fname} dim2`
      zdimp=`fslval ${fname} dim3`
      tdimp=`fslval ${fname} dim4`
	  if [[ ! -a ${fname}.nii.gz ]] && [[ ! -a ${fname}.nii ]] && [[ ! -a ${fname}.img ]] && [[ ! -a ${fname}.img.gz ]]; then
		echo "ERROR: ${fname} does not exist, is not readable, or does not have .nii.gz, .nii, .img, or .img.gz extension. Exit program."
		rm -rf ./${tmp_folder}
		exit 1
	  elif (( "${zdimi}" != "${zdimp}" )) || (( "${tdimi}" != "${tdimp}" )); then
		echo "ERROR: Dimensions of ${input} and ${fname} do not match. Exit program."
		rm -rf ./${tmp_folder}
		exit 1
	  else
	    imcp ${fname} ./${tmp_folder}/
	  fi
done

#Move into temporary folder

cd ./${tmp_folder}/

fslmaths ${input} -Tmean reference #Create a reference image to use

#Create 3D physio regressor images

for ((i=1; i<=${number}; i++)); do
      fname=`printf "${physio}%0*d\n" 3 ${i}`
      echo "Generating 3D_${fname}"
      v=$(echo $(for l in $(seq 1 $xdimi); do echo ${fname} ; done))
      fslmerge -x 3D_${fname} ${v}
      v=$(echo $(for l in $(seq 1 $ydimi); do echo 3D_${fname} ; done))
      fslmerge -y 3D_${fname} ${v}
      fslcpgeom ${input} 3D_${fname}
done

#Apply motion correction transformations

tar zxvfm ${folder} #untar folder

for ((i=1; i<=${number}; i++)); do
  fname=`printf "${physio}%0*d\n" 3 ${i}`
  echo "Applying motion correction transformation 3D_${fname}"
  fslsplit 3D_${fname} vol -t
  for ((j=0; j<${tdimi}; j++)); do
	vol="$(printf "vol%04d" ${j})"
	flirt -in ${vol} -ref reference -applyxfm -init ./${folder::-7}/${vol}_mcf.mat -out ${vol}_mcf -interp nearestneighbour -setbackground 0
	echo "flirt -in ${vol} -ref reference -applyxfm -init ./${folder::-7}/${vol}_mcf.mat -out ${vol}_mcf -interp nearestneighbour -setbackground 0"
  done
  v="vol0???_mcf.nii.gz"
  fslmerge -tr ${output}_${fname} ${v} ${tr}
  fslmerge -tr ${output}_${fname} ${v} ${tr}
done

#Copy files to parent directory
for ((i=1; i<=${number}; i++)) ;do
	fname=`printf "${physio}%0*d\n" 3 ${i}`
	imcp ${output}_${fname} ../
done

#Move up to parent directory
cd ..

#Delete temporary folder
rm -rf ${tmp_folder}

exit 0

